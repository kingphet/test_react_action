name: React CI/CD

on:
  push:
    branches:
      - main

jobs:
  react-install:
    name: Install Node Modules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.9.0'

      - name: Install dependencies
        run: npm install

  react-test:
    name: Run ESLint Tests
    runs-on: ubuntu-latest
    needs: react-install
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.9.0'

      # - name: Run ESLint
      #   run: npx eslint './src/**/*.{js,jsx}'

  react-build:
    name: Build React App
    runs-on: ubuntu-latest
    needs: react-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.9.0'

      - name: Build project
        run: npm run build

      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: build
      #     path: build

  docker-build:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: react-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_IMAGE_NAME }} .
          docker push ${{ secrets.DOCKER_IMAGE_NAME }}
